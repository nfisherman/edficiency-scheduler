#!/usr/bin/env python3

# Copyright (c) 2022-2023 nfisherman
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

import sys, json, configparser, datetime
# TO-DO: Add GUI
# from guizero import *
from Crypto.Cipher import PKCS1_OAEP
from Crypto.PublicKey import RSA
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

A_VERSION = "0.1"

args = sys.argv[1:]
conf = configparser.ConfigParser()
conf.read('config.ini')
public_key = conf['Auth']['public_key']

def main():
  driver = webdriver.Chrome()

  # Generated by Selenium IDE
  driver.get(conf['Scheduler']['gateway'])
  driver.set_window_size(1385, 875)

  match int(conf['Auth']['sign_in_method']):
    case 1:
      # Click "Sign in with Google" button
      driver.find_element(By.CSS_SELECTOR, '.login-btn:nth-child(1) > .my-auto').click()

      # Open the email file
      with open(conf['Auth']['email_path'], 'rb') as f:
        contents = f.read()
        
        # If encrypted, unencrypt
        if conf['Auth']['encrypted']:
          cipher = PKCS1_OAEP.new(RSA.importKey(open(conf['Auth']['private_key_path']).read()))
          contents = cipher.decrypt(contents)
        
        driver.find_element(By.ID, 'identifierId').send_keys(contents.decode('UTF-8'))
        
      driver.find_element(By.ID, 'identifierId').send_keys(Keys.ENTER)
      
      # Open the password file
      with open(conf['Auth']['password_path'], 'rb') as f:
        contents = f.read()

        # If encrypted, unencrypt
        if conf['Auth']['encrypted']:
          cipher = PKCS1_OAEP.new(RSA.importKey(open(conf['Auth']['private_key_path']).read()))
          contents = cipher.decrypt(contents)

        driver.find_element(By.NAME, 'password').send_keys(contents.decode('UTF-8'))

      driver.find_element(By.ID, 'identifierId').send_keys(Keys.ENTER)
      
    case 2:
      sys.exit("Microsoft login is currently not supported")

    case _:
      driver.find_element(By.ID, "email").click()

      # Open the email file
      with open(conf['Auth']['email_path'], 'rb') as f:
        contents = f.read()

        # If encrypted, unencrypt
        if conf['Auth']['encrypted']:
          cipher = PKCS1_OAEP.new(RSA.importKey(open(conf['Auth']['private_key_path']).read()))
          contents = cipher.decrypt(contents)

          driver.find_element(By.ID, "email").send_keys(contents.decode('UTF-8'))
      
      driver.find_element(By.ID, "password").click()

      # Open the password file
      with open(conf['Auth']['password_path'], 'rb') as f:
        contents = f.read()

        # If encrypted, unencrypt
        if conf['Auth']['encrypted']:
          cipher = PKCS1_OAEP.new(RSA.importKey(open(conf['Auth']['private_key_path']).read()))
          contents = cipher.decrypt(contents)

        driver.find_element(By.ID, "password").send_keys(contents.decode('UTF-8'))

      driver.find_element(By.ID, "btnLogin").click()

  
  # Go to the "Request Sessions" page
  driver.find_element(By.CSS_SELECTOR, 'li:nth-child(3) > a').click()

  # Adds the teachers' names to a list
  teachers = list(range(5))
  teachers[0] = conf['Scheduler']['monday_name']
  teachers[1] = conf['Scheduler']['tuesday_name']
  teachers[2] = conf['Scheduler']['wednesday_name']
  teachers[3] = conf['Scheduler']['thursday_name']
  teachers[4] = conf['Scheduler']['friday_name']
  
  
  for x in range(1, 5):
    if not teachers[x] == "":
      
      driver.find_element(By.CSS_SELECTOR, '.col > .form-control').click()
      
      driver.find_element(By.CSS_SELECTOR, '.col > .form-control').send_keys(teachers[x - 1])
      
      date = datetime.date.today() + datetime.timedelta(days=x)
      date_formatted = "//*[text()='" + date.strftime("%A, %B %-mnd") + "']"
      driver.find_element(By.XPATH, date_formatted).click()
      
      driver.find_element(By.ID, 'lowButton').click()

# TO-DO: Add GUI
# def draw():
#   app = App(bg = "#e8e8e8", title='Edficiency Scheduler')
#   if conf['Scheduler']['gateway'] == "":
#     prompt = Text(app, text="Enter in your Edficiency login portal:")
#     inputBox = TextBox(app)
#     confirmButton = PushButton(app, text="Confirm", command=verify(app, prompt, inputBox))
    
  
#   if conf['Auth']['email'] == "":
#     pass

# TO-DO: Add GUI
# def verify(app, prompt, input):
#   match prompt.value:
#     case "Enter in your Edficiency login portal:":
#       if("@" in prompt.value):

#         draw()
#       else:
#         error = Text(app, text="Invalid email")
#         error.text_color = "red"


if '-h' in args:
  print('Placeholder')
# TO-DO: Add GUI
# elif '-nogui' in args:
#   main()
else:
  #draw()
  main()